#helm upgrade --install nginx-ingress nginx-stable/nginx-ingress --namespace=nginx-ingress --version=0.17.0 --dry-run > ../helmfile/helmfile-nginx-ingress.yaml
#kubectl patch svc nginx-ingress-controller -n nginx-ingress -p '{"spec": {"type": "LoadBalancer", "externalIPs":["172.31.71.218"]}}'
#kubectl port-forward pod/nginx-ingress-controller-685f585784-q2lck 8080:8080 -n nginx-ingress

#Release "nginx-ingress" has been upgraded. Happy Helming!
#NAME: nginx-ingress
#LAST DEPLOYED: Sun Apr  2 21:24:42 2023
#NAMESPACE: nginx-ingress
#STATUS: pending-upgrade
#REVISION: 12
#TEST SUITE: None
#HOOKS:
#MANIFEST:
#---
# Source: nginx-ingress/templates/controller-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress
  namespace: nginx-ingress
  labels:
    helm.sh/chart: nginx-ingress-0.17.0
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: nginx-ingress
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: nginx-ingress/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-ingress
  namespace: nginx-ingress
  labels:
    helm.sh/chart: nginx-ingress-0.17.0
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: nginx-ingress
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
data:
---
# Source: nginx-ingress/templates/controller-leader-election-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-ingress-leader-election
  namespace: nginx-ingress
  labels:
    helm.sh/chart: nginx-ingress-0.17.0
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: nginx-ingress
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: nginx-ingress/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nginx-ingress
  labels:
    helm.sh/chart: nginx-ingress-0.17.0
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: nginx-ingress
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - update
  - create
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
  - list
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - update
  - create
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  verbs:
  - get
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - k8s.nginx.org
  resources:
  - virtualservers
  - virtualserverroutes
  - globalconfigurations
  - transportservers
  - policies
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - k8s.nginx.org
  resources:
  - virtualservers/status
  - virtualserverroutes/status
  - policies/status
  - transportservers/status
  verbs:
  - update
---
# Source: nginx-ingress/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nginx-ingress
  labels:
    helm.sh/chart: nginx-ingress-0.17.0
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: nginx-ingress
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
subjects:
- kind: ServiceAccount
  name: nginx-ingress
  namespace: nginx-ingress
roleRef:
  kind: ClusterRole
  name: nginx-ingress
  apiGroup: rbac.authorization.k8s.io
---
# Source: nginx-ingress/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-ingress-controller
  namespace: nginx-ingress
  labels:
    helm.sh/chart: nginx-ingress-0.17.0
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: nginx-ingress
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  externalTrafficPolicy: Local
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  - port: 443
    targetPort: 443
    protocol: TCP
    name: https
  selector:
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: nginx-ingress
---
# Source: nginx-ingress/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  namespace: nginx-ingress
  labels:
    helm.sh/chart: nginx-ingress-0.17.0
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: nginx-ingress
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-ingress
      app.kubernetes.io/instance: nginx-ingress
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx-ingress
        app.kubernetes.io/instance: nginx-ingress
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9113"
        prometheus.io/scheme: "http"
    spec:
      serviceAccountName: nginx-ingress
      automountServiceAccountToken: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
        sysctls:
          - name: "net.ipv4.ip_unprivileged_port_start"
            value: "0"
      terminationGracePeriodSeconds: 30
      hostNetwork: false
      dnsPolicy: ClusterFirst
      containers:
      - image: nginx/nginx-ingress:3.1.0
        name: nginx-ingress
        imagePullPolicy: "IfNotPresent"
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        - name: prometheus
          containerPort: 9113
        - name: readiness-port
          containerPort: 8081
        readinessProbe:
          httpGet:
            path: /nginx-ready
            port: readiness-port
          periodSeconds: 1
          initialDelaySeconds: 0
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsUser: 101 #nginx
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        args:
          - -nginx-plus=false
          - -nginx-reload-timeout=60000
          - -enable-app-protect=false
          - -enable-app-protect-dos=false
          - -nginx-configmaps=$(POD_NAMESPACE)/nginx-ingress
          - -ingress-class=nginx
          - -health-status=false
          - -health-status-uri=/nginx-health
          - -nginx-debug=false
          - -v=1
          - -nginx-status=true
          - -nginx-status-port=8080
          - -nginx-status-allow-cidrs=127.0.0.1
          - -report-ingress-status
          - -external-service=nginx-ingress-controller
          - -enable-leader-election=true
          - -leader-election-lock-name=nginx-ingress-leader-election
          - -enable-prometheus-metrics=true
          - -prometheus-metrics-listen-port=9113
          - -prometheus-tls-secret=
          - -enable-service-insight=false
          - -service-insight-listen-port=9114
          - -service-insight-tls-secret=
          - -enable-custom-resources=true
          - -enable-snippets=false
          - -include-year=false
          - -disable-ipv6=false
          - -enable-tls-passthrough=false
          - -enable-preview-policies=false
          - -enable-cert-manager=false
          - -enable-oidc=false
          - -enable-external-dns=false
          - -ready-status=true
          - -ready-status-port=8081
          - -enable-latency-metrics=false
---
# Source: nginx-ingress/templates/controller-ingress-class.yaml
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: nginx
  labels:
    helm.sh/chart: nginx-ingress-0.17.0
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: nginx-ingress
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  controller: nginx.org/ingress-controller
